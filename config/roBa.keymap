#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q     &kp W  &kp E  &kp R         &kp T                                    &kp Y         &kp U  &kp I      &kp O    &kp P
&kp A     &kp S  &kp D  &kp F         &kp G      &none            &none        &kp H         &kp J  &kp K      &kp L    &kp BACKSPACE
&kp Z     &kp X  &kp C  &kp V         &kp B      &none            &none        &kp N         &kp M  &kp COMMA  &kp DOT  &kp SLASH
&mkp MB1  &none  &none  &kp LEFT_WIN  &lt 1 TAB  &lt 2 SPACE      &lt 2 ENTER  &lt 1 ESCAPE                             &mkp MB1
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOLUME_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp COLON                                &none         &kp LC(PAGE_UP)  &kp UP_ARROW    &kp LC(PAGE_DOWN)  &kp LA(F4)
&kp NUMBER_0  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS            &trans      &none   &none         &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW    &kp DELETE
&trans        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD           &trans      &trans  &kp HOME      &kp PAGE_DOWN    &kp PAGE_UP     &kp END            &none
&mkp MB2      &trans        &trans        &trans        &kp INTERNATIONAL_1  &trans      &trans  &kp INT_KANA                                                      &mkp MB2
            >;
        };

        NUM {
            bindings = <
&none      &kp AMPERSAND      &kp PIPE   &kp ASTERISK  &kp DOLLAR                       &none      &kp AT_SIGN     &kp LEFT_BRACE        &kp RIGHT_BRACE        &none
&kp SLASH  &kp DOUBLE_QUOTES  &kp SQT    &kp MINUS     &kp EQUAL    &none       &none   &kp TILDE  &kp UNDERSCORE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE
&none      &kp SEMICOLON      &kp COLON  &kp PLUS      &kp PERCENT  &none       &trans  &kp LCTRL  &kp HASH        &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp EXCLAMATION
&mkp MB3   &trans             &trans     &trans        &trans       &trans      &trans  &trans                                                                  &mkp MB3
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
